{
  "api_key": "",
  "api_url": "https://alloy-api.yotta.co.uk/api/",
  "source_type_property_name": "",
  "source_type_id_whitelist": [
    1234,
  ],

  "irg_config_code": "",

  # Allows Open311 service attribute parameters to be overridden,
  # e.g. to make specific attributes required, or not required,
  # server_set to be set etc.
  # Keys correspond to the service attribute's code (i.e. the Alloy attribute
  # id), and the contents of the
  # hash will be merged into the Attribute->new call.
  # This example shows how we'd make easting/northings hidden in the FMS UI
  "service_attribute_overrides": {
    "11223344": { # EASTING
      "automated": "server_set",
    },
    "11223345": { # NORTHING
      "automated": "server_set",
    },
  },

  # When POSTing new resources to Alloy, certain attributes may need
  # to be hardcoded and not based on anything we've received from FMS
  # in the service request. This config key will be merged into the
  # "attributes" key in the JSON that gets posted to /api/resource.
  # NB this will currently be sent for all resources regardless of
  # design/source type.
  # This example shows how we set a simple string attribute, as well as
  # an attribute that requires a JSON object
  "resource_attribute_defaults": {
    # This sets "STATUS" to "Pending"
    "12345": [
      {
        "command": "add",
        "resourceId": 1
      }
    ],

    # Sets "TEAM" to "Highways"
    "54321": "Highways",
  },

  # When a new inspection resource is POSTed to Alloy, we use
  # one of the attributes of the returned JSON object as the external
  # ID on FMS. This config key indicates which one to use.
  # This is Northamptonshire specific right now
  # (see E::I::UK:Northamptonshire::service_request_id_for_resource)
  "inspection_id_attribute": "",

  # open311-adapter asks FMS for the problem title and description
  # in attributes as defined in O::E::Service::UKCouncil::Alloy,
  # which should be sent to Alloy in specific attribute fields
  # in the resource. Rather than let the FMS cobrand's open311_config
  # method put these values in the attributes, which would require
  # FMS to know about specific Alloy attribute IDs, handle this mapping
  # on this end.
  # NB: This will override any resource_attribute_defaults if present.
  # TODO: These currently apply to all source types/designs.
  "request_to_resource_attribute_mapping": {
    "title": 1234567, # summary
    "description": 1234568, # explanation
  },

  # When a new inspection resource is POSTed to Alloy, we use
  # one of the attributes of the returned JSON object as the external
  # ID on FMS. This config key indicates which one to use.
  # This is Northamptonshire specific right now
  # (see E::I::UK:Northamptonshire::service_request_id_for_resource)
  "inspection_id_attribute": "",

  # There are some Alloy resource attributes which we never want to include
  # in our Open311 services - they may be irrelevant, or have values
  # calculated at the time the resource is POSTed to Alloy.
  # List these Alloy attribute IDs here.
  "ignored_attributes": [
    0987655, # Reported DateTime - current time is used
  ],


  # Alloy doesn't seem to natively have a way to indicate the time
  # that a resource was created, and instead stores the report datetime
  # in a resource attribute. This attribute varies by council, so
  # specify it here so the code can fill it in when creating a new
  # resource. This timestamp is in ISO 8601 format, hooray.
  # NB this can be omitted to disable this behaviour, but if present here
  # it should also be included in ignored_attributes above.
  # TODO: don't require this to be in ignored_attributes
  "created_datetime_attribute_id": 0987655,

}
